
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin' // Apply Hilt plugin here
}

android {
    namespace 'com.kroy.multimodule'
    compileSdk Versions.compileSdk

    defaultConfig {
        applicationId "com.kroy.multimodule"
        minSdk 24
        targetSdk Versions.compileSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    // Allow references to generated code
    kapt {
        correctErrorTypes true
    }
    composeOptions {
        kotlinCompilerExtensionVersion Versions.kotlin_compiler_ext
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

}

dependencies {

    implementation Deps.core
    implementation Deps.appcompat
    implementation platform(Deps.kotlin_bom)
    implementation Deps.android_lifecycle
    implementation Compose.activity_compose
    testImplementation Deps.junit
    androidTestImplementation Deps.junit_test
    androidTestImplementation Deps.espresso_core
    implementation platform(Compose.bom)
    implementation Compose.ui
    implementation Compose.ui_graphics
    implementation Compose.tooling_preview
    implementation Compose.material3
    androidTestImplementation platform(Compose.bom)
    androidTestImplementation Compose.ui_test
    debugImplementation Compose.tooling
    debugImplementation Compose.test_manifest

    // Retrofit for making network requests
    implementation Retrofit.retrofit
    implementation Retrofit.gson_converter
    implementation Retrofit.okhttp
    implementation Retrofit.gson

// Dagger Hilt for dependency injection
    implementation Dagger.dagger
    kapt Dagger.dagger_compiler

    // Coroutine and Viewmodel

    // ViewModel
    implementation Viewmodel.viewmodel_ktx
    // ViewModel utilities for Compose
    implementation Viewmodel.viewmodel_compose
    // LiveData
    implementation Viewmodel.livedata
    // Lifecycles only (without ViewModel or LiveData)
    implementation Viewmodel.lifecycle_runtime

    // Saved state module for ViewModel
    implementation Viewmodel.savedstate

    // Annotation processor
    kapt Viewmodel.compiler
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation Viewmodel.common

    // optional - helpers for implementing LifecycleOwner in a Service
    implementation Viewmodel.service

    // optional - ProcessLifecycleOwner provides a lifecycle for the whole application process
    implementation Viewmodel.process

    // optional - ReactiveStreams support for LiveData
    implementation Viewmodel.reactivestreams

    // optional - Test helpers for LiveData
    testImplementation Viewmodel.testing

    // optional - Test helpers for Lifecycle runtime
    testImplementation Viewmodel.runtime_testing

    implementation Glide.glide

    implementation Coroutines.coroutine
    implementation Coroutines.coroutine_core


    implementation project (":feature:movie:ui")
    implementation project (":feature:movie:Domain")
    implementation project (":feature:movie:data")
    implementation project (":core:common")
    implementation project (":core:feature_api")
    implementation Compose.navGraph

}